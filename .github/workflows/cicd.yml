name: Docker Image CI

on:
  push:
    branches: [ "school-9-devops-deploy-test" ]
  pull_request:
    branches: [ "school-9-devops-deploy-test" ]

env:
  PROJECT_ID: single-shadow-375115 # TODO: update Google Cloud project id
  SERVICE: YOUR_SERVICE_NAME # TODO: update Cloud Run service name
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_HOST: postgres
  POSTGRES_DB: securecoding
  POSTGRES_PASSWORD: root
  GKE_CLUSTER: autopilot-cluster-1    # Add your cluster name here.
  GKE_ZONE: europe-west1   # Add your cluster zone here.
  DEPLOYMENT_NAME: gke-test # Add your deployment name here.
  IMAGE: static-site

jobs:
  # unit-tests:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: tp
  #   environment: DATABASE_TEST
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js 18.x
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.x
  #         cache: 'npm'
  #         cache-dependency-path: 'tp/package-lock.json'
  #     - run: npm ci
  #     - name: Run Docker Compose to init Postgres containers
  #       run: docker-compose up -d
  #     - run: npm run test
  #       env:
  #         POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  #         POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  #         POSTGRES_TEST_PORT: ${{ secrets.POSTGRES_TEST_PORT }}
  #         POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  #         POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  # build:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: tp
  #   needs: unit-tests
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Get current date
  #       id: date
  #       run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H%M%S')"
  #     - name: Build the Docker image
  #       run: docker build . --file Dockerfile --tag azerpas/school-9-secure-coding:${{ steps.date.outputs.date }}
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Push the Docker image to Hub Registery
  #       run: docker push azerpas/school-9-secure-coding:${{ steps.date.outputs.date }}
  # deploy-db:
  #     # Add 'id-token' with the intended permissions for workload identity federation
  #   permissions:
  #     contents: "read"
  #     id-token: "write"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: tp
  #   # needs: build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Google Auth
  #       id: auth
  #       uses: "google-github-actions/auth@v0"
  #       with:
  #         credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
  #         project_id: "${{ env.PROJECT_ID }}"
          
  #     - name: Configure Docker
  #       run: gcloud auth configure-docker --quiet

  #     - name: pull image from docker hub
  #       run: docker pull postgres
  #     - name: tag image
  #       run: docker tag postgres gcr.io/single-shadow-375115/postgres
  #     - name: push to registry
  #       run: docker push gcr.io/single-shadow-375115/postgres
  #     - name: Deploy to Cloud Run
  #       id: deploy
  #       uses: google-github-actions/deploy-cloudrun@v0
  #       with:
  #         service: "service"
  #         image: gcr.io/single-shadow-375115/postgres
  #         port: ${{ env.POSTGRES_PORT }}
  #         flags: "--set-env-vars=POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }},POSTGRES_USER=${{ env.POSTGRES_USER }},POSTGRES_DB=${{ env.POSTGRES_DB }}"

  #       # If required, use the Cloud Run url output in later steps
  #     - name: Show Output
  #       run: echo ${{ steps.deploy.outputs.url }}

  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: tp

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        project_id: ${{ env.PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GOOGLE_CREDENTIALS }}

    # # Build the Docker image
    # - name: Build
    #   run: |-
    #     docker build \
    #       --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       .

    # # Push the Docker image to Google Container Registry
    # - name: Publish
    #   run: |-
    #     docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up kompose
      run: |-
        curl -L https://github.com/kubernetes/kompose/releases/download/v1.28.0/kompose-linux-amd64 -o kompose
        chmod +x kompose
        sudo mv ./kompose /usr/local/bin/kompose

    # Deploy the Docker image to the GKE cluster
    - name: create deployment files and deploy
      run: |-
        kompose convert -f docker-compose-production.yml

    - name: List files in the repository
      run: |
          ls ${{ github.workspace }}/tp

    - name: kubernetes deploy
      run: |
        kubectl apply -f ${{ github.workspace }}/tp
        
  #     # Add 'id-token' with the intended permissions for workload identity federation
  #   permissions:
  #     contents: "read"
  #     id-token: "write"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: tp
  #   # needs: build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Google Auth
  #       id: auth
  #       uses: "google-github-actions/auth@v0"
  #       with:
  #         credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
  #         project_id: "${{ env.PROJECT_ID }}"
          
  #     - name: Configure Docker
  #       run: gcloud auth configure-docker --quiet

  #     - name: pull image from docker hub
  #       run: docker pull azerpas/school-9-secure-coding:2023-02-08T144624
  #     - name: tag image
  #       run: docker tag azerpas/school-9-secure-coding:2023-02-08T144624 gcr.io/single-shadow-375115/azerpas/school-9-secure-coding:2023-02-08T144624
  #     - name: push to registry
  #       run: docker push gcr.io/single-shadow-375115/azerpas/school-9-secure-coding:2023-02-08T144624
  #     - name: Deploy to Cloud Run
  #       id: deploy
  #       uses: google-github-actions/deploy-cloudrun@v0
  #       with:
  #         service: "service"
  #         image: gcr.io/single-shadow-375115/azerpas/school-9-secure-coding:2023-02-08T144624

  #       # If required, use the Cloud Run url output in later steps
  #     - name: Show Output
  #       run: echo ${{ steps.deploy.outputs.url }}

  
